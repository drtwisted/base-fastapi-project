[tool.poetry]
name = "test project"
version = "0.1.0"
description = "This is a test project."
authors = ["Kyrylo"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "~3.11"
fastapi = {extras = ["all"], version = "^0.111.0"}
uvicorn = {extras = ["standard"], version = "^0.30.0"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.30"}
aiosqlite = "^0.20.0"
pymongo = {extras = ["srv"], version = "^4.7.2"}
motor = "^3.4.0"

[tool.poetry.group.dev.dependencies]
debugpy = "^1.8.1"
ptpython = "^3.0.27"
click = "^8.1.7"
pytest = "^8.2.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Ignore the next files or directories
exclude = [
    ".vscode",
]

# The line format
line-length = 120
indent-width = 4

# target python-version
target-version = "py310"

[tool.ruff.lint]
# Define which rules to use
# Use all pycodestyle errors that start with E3, E7, E9
# Also use all Pyflakes rules - F
# And we want the McCabe complexity check with C90
# Oh, and enable the isort with I
# And the pep7-naming rules with N
# And flake7-bandit rules with S
# How about some trailing comma goodies with COM812 and COM818?
#
# Full list of available options: 
# https://docs.astral.sh/ruff/rules/
select = [
    "E3",
    "E7",
    "E9",
    "F",
    "C90",
    "I",
    "N",
    "S",
    "COM812",
    "COM818"
]

# Which rules to ingore
# Maybe we want to ingore the doc-line-too-long warning rule
# of pycodestyle, and pep7 naming rule for classes
ignore = ["W505", "N801"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Disable warnings and fixes in test files for using of:
# * asserts (we use those in tests)
# * unused import statements (we use those to import necessary fixtures)
# * redeclaration of imported statements as function parameters (that is how pytest fixtures are imported)
"test_*" = ["S101", "F401", "F811"]
